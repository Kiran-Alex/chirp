import Head from "next/head";
import Link from "next/link";
import { SignIn, SignOutButton, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { RouterOutputs, api } from "~/utils/api";
import Image from "next/image";
import LoadingSpinner from "~/components/LoadingSpinner";
import { useState } from "react";
import toast from "react-hot-toast";

export default function Home() {
  const user = useUser();
  dayjs.extend(relativeTime);

  type PostWithUSer = RouterOutputs["post"]["getAll"][number];
  const Postview = (props: PostWithUSer) => {
    const { post, author } = props;
    return (
      <div className="flex gap-3 border-b border-slate-400 p-4" key={post.id}>
        <Image
          alt="profile pic"
          className="h-14 w-14 rounded-full "
          src={author.profileImageUrl}
          width={56}
          height={56}
        />
        <div className="flex flex-col ">
          <div className="flex gap-1 text-slate-300 ">
            <span>{"@" + author.username}</span>
            <span className="text-slate-400">
              {"â€¢ " + dayjs(post.createdAt).fromNow()}
            </span>
          </div>
          <span className="text-xl"> {post.content}</span>
        </div>
      </div>
    );
  };

  const CreatePostWizard = () => {
    const [input, setInput] = useState("");
    const { user } = useUser();
    const utils = api.useUtils();
    const { mutate, isLoading } = api.post.create.useMutation({
      onSuccess: () => {
        setInput("");
        utils.post.getAll.invalidate();
      },
      onError: (e) => {
        const res = e.data?.zodError?.fieldErrors.content;
        if (res && res[0]) {
          toast.error(res[0]);
        } else {
          toast.error("Please Try again Later");
        }
      },
    });

    if (!user) {
      return null;
    }
    return (
      <div className="flex w-full gap-4">
        <Image
          width={56}
          height={56}
          className="h-14 w-14 rounded-full"
          alt="Profile-image"
          src={user.imageUrl}
        />
        <input
          className="grow bg-transparent outline-none"
          placeholder="Type Emoji's"
          onChange={(e) => {
            setInput(e.target.value);
          }}
          onKeyDown={(e) => {
            if (e.key == "Enter") {
              e.preventDefault();
              if (input !== "") {
                mutate({
                  content: input,
                });
              }
            }
          }}
          value={input}
          disabled={isLoading}
        />
        {!isLoading ? (
          <button
            className={isLoading ? "text-slate-500" : "text-slate-50"}
            disabled={isLoading}
            onClick={() => {
              mutate({
                content: input,
              });
            }}
          >
            {" "}
            Post
          </button>
        ) : (
          <div className="flex flex-col justify-center">
            <LoadingSpinner size={18} />
          </div>
        )}
      </div>
    );
  };

  const Feed = () => {
    const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

    if (postsLoading) {
      return (
        <div className="flex grow items-center justify-center text-center">
          <LoadingSpinner size={56} />
        </div>
      );
    }

    if (!data) return <div>something went wrong </div>;

    return (
      <div className="flex grow flex-col ">
        {data?.map(({ post, author }) => (
          <Postview post={post} author={author} key={post.id} />
        ))}
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen  justify-center ">
        <div className="flex h-full w-full flex-col border-x border-slate-400 md:max-w-2xl ">
          <div className="flex border-b p-4">
            {!user.isSignedIn ? (
              <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" />
            ) : (
              <CreatePostWizard />
            )}
          </div>{" "}
          <div className="flex grow flex-col overflow-y-scroll">
            <Feed />
          </div>
        </div>
      </main>
    </>
  );
}
