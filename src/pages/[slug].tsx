import { createServerSideHelpers } from "@trpc/react-query/server";
import {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { appRouter } from "~/server/api/root";
import { api } from "~/utils/api";
import { db } from "~/server/db";
import superjson from "superjson";
import { Layout } from "~/components/Layout";

export default function ProfilePage(
  props: InferGetStaticPropsType<typeof getStaticProps>,
) {
  const { data, isLoading, isError } = api.profile.getUserByUsername.useQuery({
    username: "kiran-alex",
  });

  if (isError) return <div>Something went wrong </div>;

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div>{props.username}</div>
      </Layout>
    </>
  );
}

export const getStaticProps = async (context: GetStaticPropsContext) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { db, userId: null },
    transformer: superjson,
  });
  const slug = context.params?.slug as string;

  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({ username });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  // const posts = await db.post.findMany({
  //   select: {
  //     id: true,
  //   },
  // });
  return {
    //   paths: posts.map((post) => ({
    //     params: {
    //       id: post.id,
    //     },
    //   })),
    //   // https://nextjs.org/docs/pages/api-reference/functions/get-static-paths#fallback-blocking
    //   fallback: 'blocking',

    paths: [],
    fallback: "blocking",
  };
};
